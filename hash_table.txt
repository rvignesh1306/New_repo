class Hashtable:
    def __init__(self,size = 7):
        self.data_map = [None] * size
        
    def get_keys(self,keys):
        my_hash = 0
        for letter in keys:
            my_hash = (my_hash + ord(letter)*23)%len(self.data_map)
        return my_hash
        
    def print_hash_table(self):
        for i,val in enumerate(self.data_map):
            print(i,":", val)
    
    def set(self,key,value):
        index = self.get_keys(key)
        if self.data_map[index] is None:
            self.data_map[index] = []
        self.data_map[index].append([key,value])
        
    def get_key_value(self,key):
        index = self.get_keys(key)
        if self.data_map[index] is None:
            return None
        for i in range(len(self.data_map[index])):
            if self.data_map[index][i][0] == key:
                return self.data_map[index][i][1]
                
    def keys(self):
        all_list = []
        for i in range(len(self.data_map)):
            if self.data_map[i] is not None:
                for j in range(len(self.data_map[i])):
                    all_list.append(self.data_map[i][j][0])
                    
        return all_list
            
        
my_table = Hashtable()

my_table.set("bolts", 1400)
my_table.set("washers", 50)
my_table.set("lumber", 70)
my_table.print_hash_table()

print(my_table.keys())